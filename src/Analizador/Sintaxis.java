
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 02 20:25:46 COT 2022
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 02 20:25:46 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\002\012\000\002\002" +
    "\016\000\002\002\011\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\005\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\003\005\000\002\023\011\000\002\005\004" +
    "\000\002\005\003\000\002\006\007\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\025\004" +
    "\000\002\025\003\000\002\024\005\000\002\026\005\000" +
    "\002\026\004\000\002\026\005\000\002\026\004\000\002" +
    "\026\005\000\002\026\004\000\002\027\007\000\002\027" +
    "\005\000\002\027\006\000\002\013\005\000\002\013\004" +
    "\000\002\013\005\000\002\013\004\000\002\014\005\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\010\006\000\002\010\006\000" +
    "\002\010\007\000\002\010\007\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\011\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\015\004\000\002" +
    "\015\004\000\002\015\003\000\002\015\004\000\002\015" +
    "\004\000\002\036\005\000\002\036\004\000\002\032\005" +
    "\000\002\032\006\000\002\032\007\000\002\032\007\000" +
    "\002\032\010\000\002\032\010\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\021\005\000\002" +
    "\021\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\005\000\002\034\011" +
    "\000\002\035\015\000\002\037\011\000\002\040\013\000" +
    "\002\041\011\000\002\042\012\000\002\042\011\000\002" +
    "\033\005\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\004\000\002\043\011\000\002\044\004" +
    "\000\002\044\003\000\002\045\010\000\002\045\010\000" +
    "\002\045\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\006\031\010\135\006\001\002\000\010\031" +
    "\u0122\121\u0120\135\006\001\002\000\010\031\uffe1\121\uffe1" +
    "\135\uffe1\001\002\000\004\136\u0117\001\002\000\004\002" +
    "\u0116\001\002\000\004\127\011\001\002\000\004\106\012" +
    "\001\002\000\004\107\013\001\002\000\004\110\014\001" +
    "\002\000\046\005\027\017\042\025\023\031\026\032\033" +
    "\033\054\034\017\035\032\037\036\040\040\043\051\044" +
    "\015\045\044\102\037\103\045\124\043\125\034\137\025" +
    "\001\002\000\004\106\370\001\002\000\060\005\uffee\017" +
    "\uffee\025\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee" +
    "\037\uffee\040\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046" +
    "\uffee\047\uffee\050\uffee\102\uffee\103\uffee\111\uffee\124\uffee" +
    "\125\uffee\137\uffee\001\002\000\004\137\uff9c\001\002\000" +
    "\060\005\ufff4\017\ufff4\025\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\035\ufff4\037\ufff4\040\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\102\ufff4\103\ufff4" +
    "\111\ufff4\124\ufff4\125\ufff4\137\ufff4\001\002\000\052\005" +
    "\027\017\042\025\023\031\026\032\033\033\054\034\017" +
    "\035\032\037\036\040\040\042\134\043\051\044\015\045" +
    "\044\102\037\103\045\111\367\124\043\125\034\137\025" +
    "\001\002\000\060\005\ufffc\017\ufffc\025\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\034\ufffc\035\ufffc\037\ufffc\040\ufffc\042\ufffc" +
    "\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\102" +
    "\ufffc\103\ufffc\111\ufffc\124\ufffc\125\ufffc\137\ufffc\001\002" +
    "\000\004\106\361\001\002\000\060\005\uffe9\017\uffe9\025" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9" +
    "\040\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\050\uffe9\102\uffe9\103\uffe9\111\uffe9\124\uffe9\125\uffe9" +
    "\137\uffe9\001\002\000\022\072\167\073\157\074\165\075" +
    "\164\076\166\077\160\102\344\103\345\001\002\000\004" +
    "\137\uff9f\001\002\000\046\051\320\052\333\053\340\054" +
    "\331\055\335\106\317\107\316\110\330\111\326\112\324" +
    "\113\322\131\334\132\327\133\336\134\341\135\337\137" +
    "\325\140\321\001\002\000\060\005\ufff2\017\ufff2\025\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\040" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2" +
    "\050\ufff2\102\ufff2\103\ufff2\111\ufff2\124\ufff2\125\ufff2\137" +
    "\ufff2\001\002\000\060\005\ufff0\017\ufff0\025\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0\042" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0" +
    "\102\ufff0\103\ufff0\111\ufff0\124\ufff0\125\ufff0\137\ufff0\001" +
    "\002\000\004\137\uff99\001\002\000\010\031\315\034\314" +
    "\035\313\001\002\000\004\100\303\001\002\000\060\005" +
    "\ufffa\017\ufffa\025\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\037\ufffa\040\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\102\ufffa\103\ufffa\111\ufffa" +
    "\124\ufffa\125\ufffa\137\ufffa\001\002\000\004\137\uffa0\001" +
    "\002\000\004\137\301\001\002\000\004\106\267\001\002" +
    "\000\060\005\ufff8\017\ufff8\025\ufff8\031\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\037\ufff8\040\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\102\ufff8\103" +
    "\ufff8\111\ufff8\124\ufff8\125\ufff8\137\ufff8\001\002\000\004" +
    "\140\265\001\002\000\004\101\250\001\002\000\004\106" +
    "\221\001\002\000\004\137\217\001\002\000\004\137\155" +
    "\001\002\000\060\005\ufff6\017\ufff6\025\ufff6\031\ufff6\032" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\102" +
    "\ufff6\103\ufff6\111\ufff6\124\ufff6\125\ufff6\137\ufff6\001\002" +
    "\000\060\005\uffeb\017\uffeb\025\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\102\uffeb\103" +
    "\uffeb\111\uffeb\124\uffeb\125\uffeb\137\uffeb\001\002\000\004" +
    "\106\060\001\002\000\060\005\uffe5\017\uffe5\025\uffe5\031" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037\uffe5\040\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\102\uffe5\103\uffe5\111\uffe5\124\uffe5\125\uffe5\137\uffe5" +
    "\001\002\000\060\005\uffe7\017\uffe7\025\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\040\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\102" +
    "\uffe7\103\uffe7\111\uffe7\124\uffe7\125\uffe7\137\uffe7\001\002" +
    "\000\010\031\057\034\056\035\055\001\002\000\004\137" +
    "\uff97\001\002\000\004\137\uff9a\001\002\000\004\137\uff9d" +
    "\001\002\000\014\104\062\105\063\106\065\137\070\140" +
    "\061\001\002\000\016\064\077\065\073\066\074\067\072" +
    "\070\071\071\075\001\002\000\006\107\uff7f\134\uff7f\001" +
    "\002\000\006\107\uff7e\134\uff7e\001\002\000\004\107\117" +
    "\001\002\000\010\106\065\137\070\140\061\001\002\000" +
    "\012\056\104\057\103\107\uff7c\134\uff7c\001\002\000\012" +
    "\056\104\057\103\107\uff7d\134\uff7d\001\002\000\016\064" +
    "\077\065\073\066\074\067\072\070\071\071\075\001\002" +
    "\000\006\137\uff88\140\uff88\001\002\000\006\137\uff89\140" +
    "\uff89\001\002\000\006\137\uff8b\140\uff8b\001\002\000\006" +
    "\137\uff8a\140\uff8a\001\002\000\006\137\uff87\140\uff87\001" +
    "\002\000\006\137\101\140\100\001\002\000\006\137\uff8c" +
    "\140\uff8c\001\002\000\012\056\uff85\057\uff85\107\uff85\134" +
    "\uff85\001\002\000\012\056\uff86\057\uff86\107\uff86\134\uff86" +
    "\001\002\000\010\106\105\137\070\140\061\001\002\000" +
    "\010\106\uff8d\137\uff8d\140\uff8d\001\002\000\010\106\uff8e" +
    "\137\uff8e\140\uff8e\001\002\000\010\106\105\137\070\140" +
    "\061\001\002\000\012\056\uff81\057\uff81\107\uff81\134\uff81" +
    "\001\002\000\004\107\110\001\002\000\012\056\uff82\057" +
    "\uff82\107\uff82\134\uff82\001\002\000\010\106\065\137\070" +
    "\140\061\001\002\000\006\056\104\057\103\001\002\000" +
    "\006\107\uff7b\134\uff7b\001\002\000\010\056\104\057\103" +
    "\107\110\001\002\000\004\107\116\001\002\000\012\056" +
    "\uff80\057\uff80\107\uff80\134\uff80\001\002\000\004\110\120" +
    "\001\002\000\046\005\027\017\042\025\023\031\026\032" +
    "\033\033\054\034\017\035\032\037\036\040\040\043\051" +
    "\044\015\045\044\102\037\103\045\124\043\125\034\137" +
    "\025\001\002\000\052\005\027\017\042\025\023\031\026" +
    "\032\033\033\054\034\017\035\032\037\036\040\040\042" +
    "\134\043\051\044\015\045\044\102\037\103\045\111\127" +
    "\124\043\125\034\137\025\001\002\000\060\005\uffef\017" +
    "\uffef\025\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef" +
    "\037\uffef\040\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\102\uffef\103\uffef\111\uffef\124\uffef" +
    "\125\uffef\137\uffef\001\002\000\060\005\ufffd\017\ufffd\025" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\037\ufffd" +
    "\040\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047" +
    "\ufffd\050\ufffd\102\ufffd\103\ufffd\111\ufffd\124\ufffd\125\ufffd" +
    "\137\ufffd\001\002\000\060\005\ufff5\017\ufff5\025\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\037\ufff5\040\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\102\ufff5\103\ufff5\111\ufff5\124\ufff5\125\ufff5\137\ufff5" +
    "\001\002\000\060\005\uffea\017\uffea\025\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\037\uffea\040\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\102" +
    "\uffea\103\uffea\111\uffea\124\uffea\125\uffea\137\uffea\001\002" +
    "\000\060\005\ufff3\017\ufff3\025\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\042\ufff3\043\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\102\ufff3\103" +
    "\ufff3\111\ufff3\124\ufff3\125\ufff3\137\ufff3\001\002\000\060" +
    "\005\uff78\017\uff78\025\uff78\031\uff78\032\uff78\033\uff78\034" +
    "\uff78\035\uff78\037\uff78\040\uff78\042\uff78\043\uff78\044\uff78" +
    "\045\uff78\046\uff78\047\uff78\050\uff78\102\uff78\103\uff78\111" +
    "\uff78\124\uff78\125\uff78\137\uff78\001\002\000\060\005\ufff1" +
    "\017\ufff1\025\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\102\ufff1\103\ufff1\111\ufff1\124" +
    "\ufff1\125\ufff1\137\ufff1\001\002\000\060\005\ufffb\017\ufffb" +
    "\025\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\037" +
    "\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\102\ufffb\103\ufffb\111\ufffb\124\ufffb\125" +
    "\ufffb\137\ufffb\001\002\000\004\042\134\001\002\000\060" +
    "\005\ufff9\017\ufff9\025\ufff9\031\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\037\ufff9\040\ufff9\042\ufff9\043\ufff9\044\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\102\ufff9\103\ufff9\111" +
    "\ufff9\124\ufff9\125\ufff9\137\ufff9\001\002\000\004\110\141" +
    "\001\002\000\060\005\ufff7\017\ufff7\025\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7\040\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\102" +
    "\ufff7\103\ufff7\111\ufff7\124\ufff7\125\ufff7\137\ufff7\001\002" +
    "\000\060\005\uffec\017\uffec\025\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\037\uffec\040\uffec\042\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\102\uffec\103" +
    "\uffec\111\uffec\124\uffec\125\uffec\137\uffec\001\002\000\060" +
    "\005\uffe6\017\uffe6\025\uffe6\031\uffe6\032\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\102\uffe6\103\uffe6\111" +
    "\uffe6\124\uffe6\125\uffe6\137\uffe6\001\002\000\060\005\uffe8" +
    "\017\uffe8\025\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\037\uffe8\040\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\046\uffe8\047\uffe8\050\uffe8\102\uffe8\103\uffe8\111\uffe8\124" +
    "\uffe8\125\uffe8\137\uffe8\001\002\000\046\005\027\017\042" +
    "\025\023\031\026\032\033\033\054\034\017\035\032\037" +
    "\036\040\040\043\051\044\015\045\044\102\037\103\045" +
    "\124\043\125\034\137\025\001\002\000\052\005\027\017" +
    "\042\025\023\031\026\032\033\033\054\034\017\035\032" +
    "\037\036\040\040\042\134\043\051\044\015\045\044\102" +
    "\037\103\045\111\143\124\043\125\034\137\025\001\002" +
    "\000\004\043\144\001\002\000\004\106\145\001\002\000" +
    "\014\104\062\105\063\106\065\137\070\140\061\001\002" +
    "\000\004\107\147\001\002\000\004\134\150\001\002\000" +
    "\060\005\uff77\017\uff77\025\uff77\031\uff77\032\uff77\033\uff77" +
    "\034\uff77\035\uff77\037\uff77\040\uff77\042\uff77\043\uff77\044" +
    "\uff77\045\uff77\046\uff77\047\uff77\050\uff77\102\uff77\103\uff77" +
    "\111\uff77\124\uff77\125\uff77\137\uff77\001\002\000\060\005" +
    "\uffed\017\uffed\025\uffed\031\uffed\032\uffed\033\uffed\034\uffed" +
    "\035\uffed\037\uffed\040\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\102\uffed\103\uffed\111\uffed" +
    "\124\uffed\125\uffed\137\uffed\001\002\000\006\137\154\140" +
    "\153\001\002\000\012\056\uff84\057\uff84\107\uff84\134\uff84" +
    "\001\002\000\012\056\uff83\057\uff83\107\uff83\134\uff83\001" +
    "\002\000\022\072\167\073\157\074\165\075\164\076\166" +
    "\077\160\132\163\134\161\001\002\000\006\137\175\140" +
    "\174\001\002\000\006\137\uffb6\140\uffb6\001\002\000\006" +
    "\137\uffb2\140\uffb2\001\002\000\060\005\uff94\017\uff94\025" +
    "\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\037\uff94" +
    "\040\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\102\uff94\103\uff94\111\uff94\124\uff94\125\uff94" +
    "\137\uff94\001\002\000\006\132\172\134\171\001\002\000" +
    "\004\137\170\001\002\000\006\137\uffb4\140\uffb4\001\002" +
    "\000\006\137\uffb5\140\uffb5\001\002\000\006\137\uffb3\140" +
    "\uffb3\001\002\000\006\137\uffb7\140\uffb7\001\002\000\006" +
    "\132\uff95\134\uff95\001\002\000\060\005\uff93\017\uff93\025" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\037\uff93" +
    "\040\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047" +
    "\uff93\050\uff93\102\uff93\103\uff93\111\uff93\124\uff93\125\uff93" +
    "\137\uff93\001\002\000\004\137\173\001\002\000\006\132" +
    "\uff96\134\uff96\001\002\000\016\051\204\052\202\053\205" +
    "\054\176\055\200\134\214\001\002\000\016\051\204\052" +
    "\202\053\205\054\176\055\200\134\177\001\002\000\006" +
    "\137\uffae\140\uffae\001\002\000\060\005\uff92\017\uff92\025" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\037\uff92" +
    "\040\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047" +
    "\uff92\050\uff92\102\uff92\103\uff92\111\uff92\124\uff92\125\uff92" +
    "\137\uff92\001\002\000\006\137\uffad\140\uffad\001\002\000" +
    "\006\137\213\140\212\001\002\000\006\137\uffb0\140\uffb0" +
    "\001\002\000\016\051\204\052\202\053\205\054\176\055" +
    "\200\134\206\001\002\000\006\137\uffb1\140\uffb1\001\002" +
    "\000\006\137\uffaf\140\uffaf\001\002\000\060\005\uff90\017" +
    "\uff90\025\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\037\uff90\040\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046" +
    "\uff90\047\uff90\050\uff90\102\uff90\103\uff90\111\uff90\124\uff90" +
    "\125\uff90\137\uff90\001\002\000\006\137\211\140\210\001" +
    "\002\000\016\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\134\uffa4\001\002\000\016\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\134\uffa3\001\002\000\016\051\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\134\uffa2\001\002\000\016\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\134\uffa1\001\002" +
    "\000\060\005\uff91\017\uff91\025\uff91\031\uff91\032\uff91\033" +
    "\uff91\034\uff91\035\uff91\037\uff91\040\uff91\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\047\uff91\050\uff91\102\uff91\103" +
    "\uff91\111\uff91\124\uff91\125\uff91\137\uff91\001\002\000\016" +
    "\051\204\052\202\053\205\054\176\055\200\134\216\001" +
    "\002\000\060\005\uff8f\017\uff8f\025\uff8f\031\uff8f\032\uff8f" +
    "\033\uff8f\034\uff8f\035\uff8f\037\uff8f\040\uff8f\042\uff8f\043" +
    "\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\102\uff8f" +
    "\103\uff8f\111\uff8f\124\uff8f\125\uff8f\137\uff8f\001\002\000" +
    "\004\134\220\001\002\000\060\005\uffa5\017\uffa5\025\uffa5" +
    "\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\037\uffa5\040" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\102\uffa5\103\uffa5\111\uffa5\124\uffa5\125\uffa5\137" +
    "\uffa5\001\002\000\004\137\222\001\002\000\004\107\223" +
    "\001\002\000\004\110\224\001\002\000\006\046\226\047" +
    "\225\001\002\000\004\133\245\001\002\000\006\137\234" +
    "\140\233\001\002\000\010\046\uff6c\047\uff6c\111\uff6c\001" +
    "\002\000\010\046\226\047\225\111\231\001\002\000\060" +
    "\005\uff6e\017\uff6e\025\uff6e\031\uff6e\032\uff6e\033\uff6e\034" +
    "\uff6e\035\uff6e\037\uff6e\040\uff6e\042\uff6e\043\uff6e\044\uff6e" +
    "\045\uff6e\046\uff6e\047\uff6e\050\uff6e\102\uff6e\103\uff6e\111" +
    "\uff6e\124\uff6e\125\uff6e\137\uff6e\001\002\000\010\046\uff6d" +
    "\047\uff6d\111\uff6d\001\002\000\004\133\241\001\002\000" +
    "\004\133\235\001\002\000\046\005\027\017\042\025\023" +
    "\031\026\032\033\033\054\034\017\035\032\037\036\040" +
    "\040\043\051\044\015\045\044\102\037\103\045\124\043" +
    "\125\034\137\025\001\002\000\052\005\027\017\042\025" +
    "\023\031\026\032\033\033\054\034\017\035\032\037\036" +
    "\040\040\042\134\043\051\044\015\045\044\050\237\102" +
    "\037\103\045\124\043\125\034\137\025\001\002\000\004" +
    "\134\240\001\002\000\010\046\uff6a\047\uff6a\111\uff6a\001" +
    "\002\000\046\005\027\017\042\025\023\031\026\032\033" +
    "\033\054\034\017\035\032\037\036\040\040\043\051\044" +
    "\015\045\044\102\037\103\045\124\043\125\034\137\025" +
    "\001\002\000\052\005\027\017\042\025\023\031\026\032" +
    "\033\033\054\034\017\035\032\037\036\040\040\042\134" +
    "\043\051\044\015\045\044\050\243\102\037\103\045\124" +
    "\043\125\034\137\025\001\002\000\004\134\244\001\002" +
    "\000\010\046\uff6b\047\uff6b\111\uff6b\001\002\000\046\005" +
    "\027\017\042\025\023\031\026\032\033\033\054\034\017" +
    "\035\032\037\036\040\040\043\051\044\015\045\044\102" +
    "\037\103\045\124\043\125\034\137\025\001\002\000\056" +
    "\005\027\017\042\025\023\031\026\032\033\033\054\034" +
    "\017\035\032\037\036\040\040\042\134\043\051\044\015" +
    "\045\044\046\uff69\047\uff69\102\037\103\045\111\uff69\124" +
    "\043\125\034\137\025\001\002\000\006\101\257\134\256" +
    "\001\002\000\012\005\027\126\253\137\254\140\251\001" +
    "\002\000\006\101\uffc2\134\uffc2\001\002\000\006\101\uffc4" +
    "\134\uffc4\001\002\000\004\134\255\001\002\000\006\101" +
    "\uffc0\134\uffc0\001\002\000\060\005\uffbd\017\uffbd\025\uffbd" +
    "\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd\040" +
    "\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\102\uffbd\103\uffbd\111\uffbd\124\uffbd\125\uffbd\137" +
    "\uffbd\001\002\000\060\005\uffbe\017\uffbe\025\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\042" +
    "\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\102\uffbe\103\uffbe\111\uffbe\124\uffbe\125\uffbe\137\uffbe\001" +
    "\002\000\012\005\027\126\262\137\263\140\261\001\002" +
    "\000\006\101\uffc5\134\uffc5\001\002\000\006\101\uffc3\134" +
    "\uffc3\001\002\000\004\134\264\001\002\000\006\101\uffc1" +
    "\134\uffc1\001\002\000\060\005\uffbf\017\uffbf\025\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf" +
    "\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\102\uffbf\103\uffbf\111\uffbf\124\uffbf\125\uffbf\137\uffbf" +
    "\001\002\000\004\134\266\001\002\000\060\005\uffe4\017" +
    "\uffe4\025\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\037\uffe4\040\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\047\uffe4\050\uffe4\102\uffe4\103\uffe4\111\uffe4\124\uffe4" +
    "\125\uffe4\137\uffe4\001\002\000\014\104\062\105\063\106" +
    "\065\137\070\140\061\001\002\000\004\107\271\001\002" +
    "\000\004\110\272\001\002\000\046\005\027\017\042\025" +
    "\023\031\026\032\033\033\054\034\017\035\032\037\036" +
    "\040\040\043\051\044\015\045\044\102\037\103\045\124" +
    "\043\125\034\137\025\001\002\000\052\005\027\017\042" +
    "\025\023\031\026\032\033\033\054\034\017\035\032\037" +
    "\036\040\040\042\134\043\051\044\015\045\044\102\037" +
    "\103\045\111\274\124\043\125\034\137\025\001\002\000" +
    "\062\005\uff7a\017\uff7a\025\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\037\uff7a\040\uff7a\041\275\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\102\uff7a" +
    "\103\uff7a\111\uff7a\124\uff7a\125\uff7a\137\uff7a\001\002\000" +
    "\004\110\276\001\002\000\046\005\027\017\042\025\023" +
    "\031\026\032\033\033\054\034\017\035\032\037\036\040" +
    "\040\043\051\044\015\045\044\102\037\103\045\124\043" +
    "\125\034\137\025\001\002\000\052\005\027\017\042\025" +
    "\023\031\026\032\033\033\054\034\017\035\032\037\036" +
    "\040\040\042\134\043\051\044\015\045\044\102\037\103" +
    "\045\111\300\124\043\125\034\137\025\001\002\000\060" +
    "\005\uff79\017\uff79\025\uff79\031\uff79\032\uff79\033\uff79\034" +
    "\uff79\035\uff79\037\uff79\040\uff79\042\uff79\043\uff79\044\uff79" +
    "\045\uff79\046\uff79\047\uff79\050\uff79\102\uff79\103\uff79\111" +
    "\uff79\124\uff79\125\uff79\137\uff79\001\002\000\004\134\302" +
    "\001\002\000\060\005\uffa6\017\uffa6\025\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\102" +
    "\uffa6\103\uffa6\111\uffa6\124\uffa6\125\uffa6\137\uffa6\001\002" +
    "\000\006\005\027\137\312\001\002\000\006\100\306\134" +
    "\305\001\002\000\060\005\uffb8\017\uffb8\025\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\102\uffb8\103\uffb8\111\uffb8\124\uffb8\125\uffb8\137\uffb8\001" +
    "\002\000\006\005\027\137\310\001\002\000\006\100\uffbc" +
    "\134\uffbc\001\002\000\006\100\uffba\134\uffba\001\002\000" +
    "\006\100\uffbb\134\uffbb\001\002\000\006\100\uffb9\134\uffb9" +
    "\001\002\000\004\137\uff98\001\002\000\004\137\uff9b\001" +
    "\002\000\004\137\uff9e\001\002\000\050\005\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\106\uffce\107\uffce\110" +
    "\uffce\111\uffce\112\uffce\113\uffce\131\uffce\132\uffce\133\uffce" +
    "\134\uffce\135\uffce\137\uffce\140\uffce\001\002\000\050\005" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\106\uffcf" +
    "\107\uffcf\110\uffcf\111\uffcf\112\uffcf\113\uffcf\131\uffcf\132" +
    "\uffcf\133\uffcf\134\uffcf\135\uffcf\137\uffcf\140\uffcf\001\002" +
    "\000\050\005\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\106\uffd8\107\uffd8\110\uffd8\111\uffd8\112\uffd8\113\uffd8" +
    "\131\uffd8\132\uffd8\133\uffd8\134\uffd8\135\uffd8\137\uffd8\140" +
    "\uffd8\001\002\000\050\005\uffd9\051\uffd9\052\uffd9\053\uffd9" +
    "\054\uffd9\055\uffd9\106\uffd9\107\uffd9\110\uffd9\111\uffd9\112" +
    "\uffd9\113\uffd9\131\uffd9\132\uffd9\133\uffd9\134\uffd9\135\uffd9" +
    "\137\uffd9\140\uffd9\001\002\000\050\005\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\106\uffca\107\uffca\110\uffca" +
    "\111\uffca\112\uffca\113\uffca\131\uffca\132\uffca\133\uffca\134" +
    "\uffca\135\uffca\137\uffca\140\uffca\001\002\000\050\005\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\106\uffc7\107" +
    "\uffc7\110\uffc7\111\uffc7\112\uffc7\113\uffc7\131\uffc7\132\uffc7" +
    "\133\uffc7\134\uffc7\135\uffc7\137\uffc7\140\uffc7\001\002\000" +
    "\050\005\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\106\uffcb\107\uffcb\110\uffcb\111\uffcb\112\uffcb\113\uffcb\131" +
    "\uffcb\132\uffcb\133\uffcb\134\uffcb\135\uffcb\137\uffcb\140\uffcb" +
    "\001\002\000\050\005\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\106\uffda\107\uffda\110\uffda\111\uffda\112\uffda" +
    "\113\uffda\131\uffda\132\uffda\133\uffda\134\uffda\135\uffda\137" +
    "\uffda\140\uffda\001\002\000\050\005\uffcc\051\uffcc\052\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\106\uffcc\107\uffcc\110\uffcc\111" +
    "\uffcc\112\uffcc\113\uffcc\131\uffcc\132\uffcc\133\uffcc\134\uffcc" +
    "\135\uffcc\137\uffcc\140\uffcc\001\002\000\050\005\uffd2\051" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\106\uffd2\107\uffd2" +
    "\110\uffd2\111\uffd2\112\uffd2\113\uffd2\131\uffd2\132\uffd2\133" +
    "\uffd2\134\uffd2\135\uffd2\137\uffd2\140\uffd2\001\002\000\050" +
    "\005\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\106" +
    "\uffcd\107\uffcd\110\uffcd\111\uffcd\112\uffcd\113\uffcd\131\uffcd" +
    "\132\uffcd\133\uffcd\134\uffcd\135\uffcd\137\uffcd\140\uffcd\001" +
    "\002\000\050\005\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\106\uffd5\107\uffd5\110\uffd5\111\uffd5\112\uffd5\113" +
    "\uffd5\131\uffd5\132\uffd5\133\uffd5\134\uffd5\135\uffd5\137\uffd5" +
    "\140\uffd5\001\002\000\050\005\343\051\320\052\333\053" +
    "\340\054\331\055\335\106\317\107\316\110\330\111\326" +
    "\112\324\113\322\131\334\132\327\133\336\134\341\135" +
    "\337\137\325\140\321\001\002\000\050\005\uffd7\051\uffd7" +
    "\052\uffd7\053\uffd7\054\uffd7\055\uffd7\106\uffd7\107\uffd7\110" +
    "\uffd7\111\uffd7\112\uffd7\113\uffd7\131\uffd7\132\uffd7\133\uffd7" +
    "\134\uffd7\135\uffd7\137\uffd7\140\uffd7\001\002\000\050\005" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\106\uffd3" +
    "\107\uffd3\110\uffd3\111\uffd3\112\uffd3\113\uffd3\131\uffd3\132" +
    "\uffd3\133\uffd3\134\uffd3\135\uffd3\137\uffd3\140\uffd3\001\002" +
    "\000\050\005\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\112\uffd4\113\uffd4" +
    "\131\uffd4\132\uffd4\133\uffd4\134\uffd4\135\uffd4\137\uffd4\140" +
    "\uffd4\001\002\000\050\005\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\055\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\112" +
    "\uffd0\113\uffd0\131\uffd0\132\uffd0\133\uffd0\134\uffd0\135\uffd0" +
    "\137\uffd0\140\uffd0\001\002\000\050\005\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\106\uffc9\107\uffc9\110\uffc9" +
    "\111\uffc9\112\uffc9\113\uffc9\131\uffc9\132\uffc9\133\uffc9\134" +
    "\uffc9\135\uffc9\137\uffc9\140\uffc9\001\002\000\050\005\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\106\uffd6\107" +
    "\uffd6\110\uffd6\111\uffd6\112\uffd6\113\uffd6\131\uffd6\132\uffd6" +
    "\133\uffd6\134\uffd6\135\uffd6\137\uffd6\140\uffd6\001\002\000" +
    "\050\005\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\106\uffd1\107\uffd1\110\uffd1\111\uffd1\112\uffd1\113\uffd1\131" +
    "\uffd1\132\uffd1\133\uffd1\134\uffd1\135\uffd1\137\uffd1\140\uffd1" +
    "\001\002\000\050\005\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8" +
    "\113\uffc8\131\uffc8\132\uffc8\133\uffc8\134\uffc8\135\uffc8\137" +
    "\uffc8\140\uffc8\001\002\000\066\005\uffc6\017\uffc6\025\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\040" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\111\uffc6\124" +
    "\uffc6\125\uffc6\134\uffc6\137\uffc6\001\002\000\004\134\360" +
    "\001\002\000\004\134\357\001\002\000\006\137\350\140" +
    "\347\001\002\000\016\051\204\052\202\053\205\054\176" +
    "\055\200\134\354\001\002\000\016\051\204\052\202\053" +
    "\205\054\176\055\200\134\351\001\002\000\060\005\uffab" +
    "\017\uffab\025\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035" +
    "\uffab\037\uffab\040\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\102\uffab\103\uffab\111\uffab\124" +
    "\uffab\125\uffab\137\uffab\001\002\000\016\051\204\052\202" +
    "\053\205\054\176\055\200\134\353\001\002\000\060\005" +
    "\uffa9\017\uffa9\025\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\037\uffa9\040\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\102\uffa9\103\uffa9\111\uffa9" +
    "\124\uffa9\125\uffa9\137\uffa9\001\002\000\060\005\uffac\017" +
    "\uffac\025\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac" +
    "\037\uffac\040\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\047\uffac\050\uffac\102\uffac\103\uffac\111\uffac\124\uffac" +
    "\125\uffac\137\uffac\001\002\000\016\051\204\052\202\053" +
    "\205\054\176\055\200\134\356\001\002\000\060\005\uffaa" +
    "\017\uffaa\025\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\037\uffaa\040\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\047\uffaa\050\uffaa\102\uffaa\103\uffaa\111\uffaa\124" +
    "\uffaa\125\uffaa\137\uffaa\001\002\000\060\005\uffa7\017\uffa7" +
    "\025\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037" +
    "\uffa7\040\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\102\uffa7\103\uffa7\111\uffa7\124\uffa7\125" +
    "\uffa7\137\uffa7\001\002\000\060\005\uffa8\017\uffa8\025\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8\040" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\102\uffa8\103\uffa8\111\uffa8\124\uffa8\125\uffa8\137" +
    "\uffa8\001\002\000\004\005\362\001\002\000\004\137\363" +
    "\001\002\000\004\005\364\001\002\000\004\107\365\001" +
    "\002\000\004\134\366\001\002\000\060\005\uffe3\017\uffe3" +
    "\025\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\037" +
    "\uffe3\040\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\102\uffe3\103\uffe3\111\uffe3\124\uffe3\125" +
    "\uffe3\137\uffe3\001\002\000\004\002\ufffe\001\002\000\020" +
    "\031\026\032\033\033\054\034\017\035\032\037\036\137" +
    "\373\001\002\000\004\107\u0112\001\002\000\004\137\u010b" +
    "\001\002\000\004\072\374\001\002\000\004\140\375\001" +
    "\002\000\004\134\376\001\002\000\014\104\062\105\063" +
    "\106\065\137\070\140\061\001\002\000\004\134\u0100\001" +
    "\002\000\010\102\u0103\103\u0104\137\u0102\001\002\000\004" +
    "\107\uff74\001\002\000\022\072\167\073\157\074\165\075" +
    "\164\076\166\077\160\102\u0107\103\u0108\001\002\000\004" +
    "\137\u0106\001\002\000\004\137\u0105\001\002\000\004\107" +
    "\uff6f\001\002\000\004\107\uff70\001\002\000\004\107\uff72" +
    "\001\002\000\004\107\uff71\001\002\000\004\140\u010a\001" +
    "\002\000\004\107\uff73\001\002\000\004\072\u010c\001\002" +
    "\000\004\140\u010d\001\002\000\004\134\u010e\001\002\000" +
    "\014\104\062\105\063\106\065\137\070\140\061\001\002" +
    "\000\004\134\u0110\001\002\000\010\102\u0103\103\u0104\137" +
    "\u0102\001\002\000\004\107\uff75\001\002\000\004\110\u0113" +
    "\001\002\000\046\005\027\017\042\025\023\031\026\032" +
    "\033\033\054\034\017\035\032\037\036\040\040\043\051" +
    "\044\015\045\044\102\037\103\045\124\043\125\034\137" +
    "\025\001\002\000\052\005\027\017\042\025\023\031\026" +
    "\032\033\033\054\034\017\035\032\037\036\040\040\042" +
    "\134\043\051\044\015\045\044\102\037\103\045\111\u0115" +
    "\124\043\125\034\137\025\001\002\000\060\005\uff76\017" +
    "\uff76\025\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035\uff76" +
    "\037\uff76\040\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046" +
    "\uff76\047\uff76\050\uff76\102\uff76\103\uff76\111\uff76\124\uff76" +
    "\125\uff76\137\uff76\001\002\000\004\002\001\001\002\000" +
    "\004\064\u0118\001\002\000\014\114\u011b\115\u0119\116\u011c" +
    "\117\u011d\120\u011e\001\002\000\004\066\uffde\001\002\000" +
    "\004\066\u011f\001\002\000\004\066\uffdf\001\002\000\004" +
    "\066\uffdd\001\002\000\004\066\uffdc\001\002\000\004\066" +
    "\uffdb\001\002\000\010\031\uffe0\121\uffe0\135\uffe0\001\002" +
    "\000\004\122\u0129\001\002\000\010\031\uffe2\121\uffe2\135" +
    "\uffe2\001\002\000\004\127\u0123\001\002\000\004\106\u0124" +
    "\001\002\000\004\107\u0125\001\002\000\004\110\u0126\001" +
    "\002\000\046\005\027\017\042\025\023\031\026\032\033" +
    "\033\054\034\017\035\032\037\036\040\040\043\051\044" +
    "\015\045\044\102\037\103\045\124\043\125\034\137\025" +
    "\001\002\000\052\005\027\017\042\025\023\031\026\032" +
    "\033\033\054\034\017\035\032\037\036\040\040\042\134" +
    "\043\051\044\015\045\044\102\037\103\045\111\u0128\124" +
    "\043\125\034\137\025\001\002\000\004\002\000\001\002" +
    "\000\004\123\u012a\001\002\000\004\134\u012b\001\002\000" +
    "\004\031\u012c\001\002\000\004\127\u012d\001\002\000\004" +
    "\106\u012e\001\002\000\004\107\u012f\001\002\000\004\110" +
    "\u0130\001\002\000\046\005\027\017\042\025\023\031\026" +
    "\032\033\033\054\034\017\035\032\037\036\040\040\043" +
    "\051\044\015\045\044\102\037\103\045\124\043\125\034" +
    "\137\025\001\002\000\052\005\027\017\042\025\023\031" +
    "\026\032\033\033\054\034\017\035\032\037\036\040\040" +
    "\042\134\043\051\044\015\045\044\102\037\103\045\111" +
    "\u0132\124\043\125\034\137\025\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\010\002\006\005\003\006\004\001\001\000" +
    "\004\006\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\051\004\020" +
    "\010\034\014\017\015\045\023\052\024\040\027\046\032" +
    "\021\034\027\035\030\037\015\041\047\043\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\136\010\130\014\123\015\045" +
    "\023\137\024\132\027\134\032\122\034\125\035\127\037" +
    "\121\040\131\041\135\043\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\345\001" +
    "\001\000\002\001\001\000\006\012\322\025\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\246\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\066" +
    "\021\065\022\063\001\001\000\004\017\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\113\021\114\001\001\000\004\016\110\001\001\000" +
    "\004\016\101\001\001\000\004\017\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\111\021\112\001\001\000\004\016\101" +
    "\001\001\000\002\001\001\000\004\016\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\051\004\120\010\034\014\017\015\045\023\052\024" +
    "\040\027\046\032\021\034\027\035\030\037\015\041\047" +
    "\043\023\001\001\000\036\003\136\010\130\014\123\015" +
    "\045\023\137\024\132\027\134\032\122\034\125\035\127" +
    "\037\121\040\131\041\135\043\124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\051\004\141" +
    "\010\034\014\017\015\045\023\052\024\040\027\046\032" +
    "\021\034\027\035\030\037\015\041\047\043\023\001\001" +
    "\000\036\003\136\010\130\014\123\015\045\023\137\024" +
    "\132\027\134\032\122\034\125\035\127\037\121\040\131" +
    "\041\135\043\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\066\021\065\022\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\030\155\036\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\214\031\200\001\001\000\006\011\202\031\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\227\045\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\051\004\235\010" +
    "\034\014\017\015\045\023\052\024\040\027\046\032\021" +
    "\034\027\035\030\037\015\041\047\043\023\001\001\000" +
    "\036\003\136\010\130\014\123\015\045\023\137\024\132" +
    "\027\134\032\122\034\125\035\127\037\121\040\131\041" +
    "\135\043\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\051\004\241\010\034\014\017\015\045\023" +
    "\052\024\040\027\046\032\021\034\027\035\030\037\015" +
    "\041\047\043\023\001\001\000\036\003\136\010\130\014" +
    "\123\015\045\023\137\024\132\027\134\032\122\034\125" +
    "\035\127\037\121\040\131\041\135\043\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\051\004\245" +
    "\010\034\014\017\015\045\023\052\024\040\027\046\032" +
    "\021\034\027\035\030\037\015\041\047\043\023\001\001" +
    "\000\036\003\136\010\130\014\123\015\045\023\137\024" +
    "\132\027\134\032\122\034\125\035\127\037\121\040\131" +
    "\041\135\043\124\001\001\000\002\001\001\000\004\024" +
    "\251\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\066" +
    "\021\065\022\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\051\004\272\010\034\014\017\015\045" +
    "\023\052\024\040\027\046\032\021\034\027\035\030\037" +
    "\015\041\047\043\023\001\001\000\036\003\136\010\130" +
    "\014\123\015\045\023\137\024\132\027\134\032\122\034" +
    "\125\035\127\037\121\040\131\041\135\043\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\051\004" +
    "\276\010\034\014\017\015\045\023\052\024\040\027\046" +
    "\032\021\034\027\035\030\037\015\041\047\043\023\001" +
    "\001\000\036\003\136\010\130\014\123\015\045\023\137" +
    "\024\132\027\134\032\122\034\125\035\127\037\121\040" +
    "\131\041\135\043\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\310\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\354\031\200\001\001\000\006\011\351\031" +
    "\200\001\001\000\002\001\001\000\004\031\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\371\042\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\066\021\065\022\376\001" +
    "\001\000\002\001\001\000\004\033\u0100\001\001\000\002" +
    "\001\001\000\004\030\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\066\021\065\022\u010e\001\001\000\002\001" +
    "\001\000\004\033\u0110\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\003\051\004\u0113\010\034\014\017\015" +
    "\045\023\052\024\040\027\046\032\021\034\027\035\030" +
    "\037\015\041\047\043\023\001\001\000\036\003\136\010" +
    "\130\014\123\015\045\023\137\024\132\027\134\032\122" +
    "\034\125\035\127\037\121\040\131\041\135\043\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\051\004\u0126\010" +
    "\034\014\017\015\045\023\052\024\040\027\046\032\021" +
    "\034\027\035\030\037\015\041\047\043\023\001\001\000" +
    "\036\003\136\010\130\014\123\015\045\023\137\024\132" +
    "\027\134\032\122\034\125\035\127\037\121\040\131\041" +
    "\135\043\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\051\004\u0130\010\034\014\017\015\045\023\052\024" +
    "\040\027\046\032\021\034\027\035\030\037\015\041\047" +
    "\043\023\001\001\000\036\003\136\010\130\014\123\015" +
    "\045\023\137\024\132\027\134\032\122\034\125\035\127" +
    "\037\121\040\131\041\135\043\124\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARACION_SWITCH ::= Default Dos_puntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_SWITCH",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLARACION_SWITCH ::= Case Identificador Dos_puntos SENTENCIA Break Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_SWITCH",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARACION_SWITCH ::= Case Numero Dos_puntos SENTENCIA Break Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_SWITCH",35, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA_SWITCH ::= DECLARACION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH DECLARACION_SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",34, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_SWITCH Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",33, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARACION_FOR ::= Op_decremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DECLARACION_FOR ::= Identificador Op_decremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION_FOR ::= Identificador OPERADORES_ASIGNACION Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",25, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SENTENCIA_FOR ::= Identificador Op_asignacion Numero Punto_coma SENTENCIA_CONDICION Punto_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SENTENCIA_FOR ::= T_DATO Identificador Op_asignacion Numero Punto_coma SENTENCIA_CONDICION Punto_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",31, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_CONDICION Parentesis_c Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",30, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // WHILE ::= While Parentesis_a SENTENCIA_CONDICION Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",29, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IF_ELSE ::= If Parentesis_a SENTENCIA_CONDICION Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",27, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IF ::= If Parentesis_a SENTENCIA_CONDICION Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",26, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SENTENCIA_CONDICION ::= CADENA_CONDICION OPERADORES_LOGICOS CADENA_CONDICION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SENTENCIA_CONDICION ::= CADENA_CONDICION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SENTENCIA_CONDICION ::= CONDICION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA_CONDICION ::= Op_false 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA_CONDICION ::= Op_true 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONDICION",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CADENA_CONDICION ::= Parentesis_a CADENA_CONDICION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CADENA_CONDICION ::= CONDICION OPERADORES_LOGICOS CONDICION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_CONDICION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CONDICION ::= Parentesis_a CONDICION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CONDICION ::= Numero OPERADORES_RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CONDICION ::= Numero OPERADORES_RELACIONALES Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CONDICION ::= Identificador OPERADORES_RELACIONALES Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CONDICION ::= Identificador OPERADORES_RELACIONALES Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CONDICION",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERADORES_RELACIONALES ::= Op_not_equal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OPERADORES_RELACIONALES ::= Op_equal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OPERADORES_RELACIONALES ::= Op_greater_than_equal_to 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OPERADORES_RELACIONALES ::= Op_greater_than 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OPERADORES_RELACIONALES ::= Op_smaller_than_equal_to 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OPERADORES_RELACIONALES ::= Op_smaller_than 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_RELACIONALES",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OPERADORES_LOGICOS ::= Op_and 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERADORES_LOGICOS ::= Op_or 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION ::= T_DATO Identificador OPERADORES_ASIGNACION Numero R_ASIGNACION Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION ::= T_DATO Identificador OPERADORES_ASIGNACION Identificador R_ASIGNACION Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION ::= T_DATO Identificador OPERADORES_ASIGNACION Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION ::= T_DATO Identificador OPERADORES_ASIGNACION Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= T_DATO Identificador R_DECLARACION Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= T_DATO Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",24, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // R_DECLARACION ::= Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("R_DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // R_DECLARACION ::= R_DECLARACION Coma Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("R_DECLARACION",28, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // T_DATO ::= Long Double 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // T_DATO ::= Short Double 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // T_DATO ::= Double 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // T_DATO ::= Long Float 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // T_DATO ::= Short Float 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // T_DATO ::= Float 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // T_DATO ::= Long Int 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // T_DATO ::= Short Int 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // T_DATO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // T_DATO ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // R_ASIGNACION ::= OPERADORES_ARITMETICOS Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("R_ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // R_ASIGNACION ::= OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("R_ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // R_ASIGNACION ::= R_ASIGNACION OPERADORES_ARITMETICOS Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("R_ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // R_ASIGNACION ::= R_ASIGNACION OPERADORES_ARITMETICOS Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("R_ASIGNACION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGNACION ::= Op_decremento Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNACION ::= Op_incremento Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNACION ::= Identificador Op_decremento Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNACION ::= Identificador Op_incremento Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNACION ::= Identificador OPERADORES_ASIGNACION Identificador R_ASIGNACION Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIGNACION ::= Identificador OPERADORES_ASIGNACION Numero R_ASIGNACION Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGNACION ::= Identificador OPERADORES_ASIGNACION Identificador Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGNACION ::= Identificador OPERADORES_ASIGNACION Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPERADORES_ARITMETICOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPERADORES_ARITMETICOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPERADORES_ARITMETICOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPERADORES_ARITMETICOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPERADORES_ARITMETICOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ARITMETICOS",23, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPERADORES_ASIGNACION ::= Op_modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES_ASIGNACION ::= Op_division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORES_ASIGNACION ::= Op_multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORES_ASIGNACION ::= Op_resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADORES_ASIGNACION ::= Op_suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADORES_ASIGNACION ::= Op_asignacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADORES_ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CIN ::= Cin CADENA_CIN Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CIN",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CADENA_CIN ::= Op_desplazamiento_bits_der Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_CIN",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CADENA_CIN ::= CADENA_CIN Op_desplazamiento_bits_der Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_CIN",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CADENA_CIN ::= Op_desplazamiento_bits_der TEXTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_CIN",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CADENA_CIN ::= CADENA_CIN Op_desplazamiento_bits_der TEXTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_CIN",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // COUT ::= Cout Op_desplazamiento_bits_izq Endl Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COUT ::= Cout CADENA_COUT Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // COUT ::= Cout CADENA_COUT Op_desplazamiento_bits_izq Endl Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",21, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CADENA_COUT ::= Op_desplazamiento_bits_izq Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CADENA_COUT ::= CADENA_COUT Op_desplazamiento_bits_izq Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CADENA_COUT ::= Op_desplazamiento_bits_izq Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CADENA_COUT ::= CADENA_COUT Op_desplazamiento_bits_izq Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CADENA_COUT ::= Op_desplazamiento_bits_izq TEXTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CADENA_COUT ::= CADENA_COUT Op_desplazamiento_bits_izq TEXTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_COUT",20, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TEXTO ::= Comillas CADENA_TEXTO Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("TEXTO",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CADENA_TEXTO ::= ELEMENTOS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_TEXTO",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CADENA_TEXTO ::= CADENA_TEXTO ELEMENTOS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CADENA_TEXTO",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELEMENTOS ::= Almohadilla 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELEMENTOS ::= Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELEMENTOS ::= Corchete_a 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELEMENTOS ::= Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELEMENTOS ::= Llave_a 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELEMENTOS ::= Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELEMENTOS ::= Parentesis_a 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELEMENTOS ::= Dos_puntos 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELEMENTOS ::= Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELEMENTOS ::= Coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELEMENTOS ::= Punto 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELEMENTOS ::= Modulo 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELEMENTOS ::= Division 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELEMENTOS ::= Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ELEMENTOS ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ELEMENTOS ::= Suma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELEMENTOS ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELEMENTOS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LIBRERIAS ::= Iostream 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LIBRERIAS ::= Time 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LIBRERIAS ::= Stdlib 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LIBRERIAS ::= Stdio 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LIBRERIAS ::= Math 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIAS",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SINTAXIS_LIBRERIAS ::= Almohadilla Include Op_smaller_than LIBRERIAS Op_greater_than 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SINTAXIS_LIBRERIAS",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_LIBRERIAS ::= SINTAXIS_LIBRERIAS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LIBRERIAS",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_LIBRERIAS ::= SENTENCIA_LIBRERIAS SINTAXIS_LIBRERIAS 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LIBRERIAS",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PAUSA ::= SystemC Parentesis_a Comillas Identificador Comillas Parentesis_c Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PAUSA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FIN ::= Return Numero Punto_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FIN",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= FIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA FIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= PAUSA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= SENTENCIA PAUSA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= TEXTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA TEXTO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= SENTENCIA_LIBRERIAS Using Namespace Std Punto_coma Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-11)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIA_LIBRERIAS Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

