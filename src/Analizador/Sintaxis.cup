package Analizador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, Auto, Const, Enum, Goto, Sizeof, Register, Unsigned, 
    Continue, Extern, Return, Static, Void, Struct, Typedef, Volatile, SystemC,
    Signed, Union, Byte, Int, Short, Long, Float, Double, Char, Cadena,
    If, Else, Do, While, For, Switch, Case, Default, Break, Suma, Resta, 
    Multiplicacion, Division, Modulo, Op_or, Op_and, Op_or_b2b, Op_and_b2b, 
    Op_xor_b2b, Op_not, Op_smaller_than, Op_smaller_than_equal_to, Op_greater_than,
    Op_greater_than_equal_to, Op_equal, Op_not_equal, Op_asignacion, Op_suma, 
    Op_resta, Op_multiplicacion, Op_division, Op_modulo, Op_desplazamiento_bits_der,
    Op_desplazamiento_bits_izq, Op_incremento, Op_decremento, Op_true, Op_false,
    Parentesis_a, Parentesis_c, Llave_a, Llave_c, Corchete_a, Corchete_c, 
    Math, Stdio, Stdlib, Time, Iostream, Using, Namespace, Std, Cout, Cin, Endl,
    Main, Printf, Punto, Coma, Dos_puntos, Punto_coma, Almohadilla, Include, Identificador, 
    Numero, ERROR;
non terminal INICIO, FIN, SENTENCIA, SENTENCIA_LIBRERIAS, SINTAXIS_LIBRERIAS, LIBRERIAS, ASIGNACION, R_ASIGNACION,
    ELEMENTOS, CADENA_CIN, CIN, T_DATO, OPERADORES_LOGICOS, OPERADORES_RELACIONALES, CONDICION, CADENA_CONDICION, SENTENCIA_CONDICION,
    PAUSA, TEXTO, CADENA_TEXTO, CADENA_COUT, COUT, OPERADORES_ASIGNACION, OPERADORES_ARITMETICOS, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    R_DECLARACION, WHILE, DO_WHILE, FOR, SENTENCIA_FOR, SWITCH, SENTENCIA_SWITCH, DECLARACION_SWITCH;

start with INICIO;

INICIO ::= 
    SENTENCIA_LIBRERIAS Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    SENTENCIA_LIBRERIAS Using Namespace Std Punto_coma Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA ASIGNACION |
    ASIGNACION |

    SENTENCIA TEXTO |
    TEXTO |
    SENTENCIA COUT |
    COUT |
    SENTENCIA CIN |
    CIN |

    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA SWITCH |
    SWITCH |
    
    SENTENCIA PAUSA |
    PAUSA |
    SENTENCIA FIN |
    FIN
;

FIN ::=
    Return Numero Punto_coma
;
PAUSA ::=
    SystemC Parentesis_a Comillas Identificador Comillas Parentesis_c Punto_coma
;

SENTENCIA_LIBRERIAS ::=
    SENTENCIA_LIBRERIAS SINTAXIS_LIBRERIAS |
    SINTAXIS_LIBRERIAS
;
SINTAXIS_LIBRERIAS ::=
    Almohadilla Include Op_smaller_than LIBRERIAS Op_greater_than
;
LIBRERIAS ::=
    Math |
    Stdio |
    Stdlib |
    Time |
    Iostream
;

ELEMENTOS ::=
    Identificador |
    Numero |
    Suma |
    Resta |
    Multiplicacion |
    Division |
    Modulo |
    Punto |
    Coma |
    Punto_coma |
    Dos_puntos |
    Parentesis_a |
    Parentesis_c |
    Llave_a |
    Llave_c |
    Corchete_a |
    Corchete_c |
    Almohadilla
;

CADENA_TEXTO ::=
    CADENA_TEXTO ELEMENTOS |
    ELEMENTOS
;
TEXTO ::=
    Comillas CADENA_TEXTO Comillas
;

CADENA_COUT ::=
    CADENA_COUT Op_desplazamiento_bits_izq TEXTO |
    Op_desplazamiento_bits_izq TEXTO |
    CADENA_COUT Op_desplazamiento_bits_izq Numero |
    Op_desplazamiento_bits_izq Numero |
    CADENA_COUT Op_desplazamiento_bits_izq Identificador |
    Op_desplazamiento_bits_izq Identificador
;
COUT ::=
    Cout CADENA_COUT Op_desplazamiento_bits_izq Endl Punto_coma |
    Cout CADENA_COUT Punto_coma |
    Cout Op_desplazamiento_bits_izq Endl Punto_coma
;
CADENA_CIN ::=
    CADENA_CIN Op_desplazamiento_bits_der TEXTO |
    Op_desplazamiento_bits_der TEXTO |
    CADENA_CIN Op_desplazamiento_bits_der Identificador |
    Op_desplazamiento_bits_der Identificador
;
CIN ::=
    Cin CADENA_CIN Punto_coma
;

OPERADORES_ASIGNACION ::=
    Op_asignacion |
    Op_suma |
    Op_resta |
    Op_multiplicacion |
    Op_division |
    Op_modulo
;
OPERADORES_ARITMETICOS ::=
    Suma |
    Resta |
    Multiplicacion |
    Division |
    Modulo
;

ASIGNACION ::=
    /* Punto y coma  */
    Identificador OPERADORES_ASIGNACION Numero Punto_coma |
    Identificador OPERADORES_ASIGNACION Identificador Punto_coma |
    Identificador OPERADORES_ASIGNACION Numero R_ASIGNACION Punto_coma |
    Identificador OPERADORES_ASIGNACION Identificador R_ASIGNACION Punto_coma |

    Identificador Op_incremento Punto_coma |
    Identificador Op_decremento Punto_coma |
    Op_incremento Identificador Punto_coma |
    Op_decremento Identificador Punto_coma
;
R_ASIGNACION ::=
    R_ASIGNACION OPERADORES_ARITMETICOS Numero |
    R_ASIGNACION OPERADORES_ARITMETICOS Identificador |

    OPERADORES_ARITMETICOS Numero |
    OPERADORES_ARITMETICOS Identificador
;

T_DATO ::=
    Cadena |
    Int |
    Short Int |
    Long Int|
    Float |
    Short Float |
    Long Float|
    Double |
    Short Double |
    Long Double
;
R_DECLARACION ::=
    R_DECLARACION Coma Identificador |
    Coma Identificador
;
DECLARACION ::= 
    T_DATO Identificador Punto_coma |
    T_DATO Identificador R_DECLARACION Punto_coma |

    T_DATO Identificador OPERADORES_ASIGNACION Identificador Punto_coma |
    T_DATO Identificador OPERADORES_ASIGNACION Numero Punto_coma |
    T_DATO Identificador OPERADORES_ASIGNACION Identificador R_ASIGNACION Punto_coma |
    T_DATO Identificador OPERADORES_ASIGNACION Numero R_ASIGNACION Punto_coma
;

OPERADORES_LOGICOS ::=
    Op_or |
    Op_and
;
OPERADORES_RELACIONALES ::=
    Op_smaller_than |
    Op_smaller_than_equal_to |
    Op_greater_than |
    Op_greater_than_equal_to |
    Op_equal |
    Op_not_equal
;

CONDICION ::=
    Identificador OPERADORES_RELACIONALES Identificador |
    Identificador OPERADORES_RELACIONALES Numero |
    Numero OPERADORES_RELACIONALES Numero |
    Numero OPERADORES_RELACIONALES Identificador |
    
    Parentesis_a CONDICION Parentesis_c
;
CADENA_CONDICION ::=
    CONDICION OPERADORES_LOGICOS CONDICION |
    Parentesis_a CADENA_CONDICION Parentesis_c
;
/*
CADENA_CONDICION ::=
    CONDICION OPERADORES_LOGICOS CONDICION |
    Parentesis_a CADENA_CONDICION Parentesis_c
;
*/
SENTENCIA_CONDICION ::=
    Op_true | 
    Op_false |
    
    CONDICION |
    CADENA_CONDICION |
    CADENA_CONDICION OPERADORES_LOGICOS CADENA_CONDICION
;

IF ::= 
    If Parentesis_a SENTENCIA_CONDICION Parentesis_c Llave_a SENTENCIA Llave_c
;
IF_ELSE ::= 
    If Parentesis_a SENTENCIA_CONDICION Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;

WHILE ::= 
    While Parentesis_a SENTENCIA_CONDICION Parentesis_c Llave_a SENTENCIA Llave_c
;

DO_WHILE ::= 
    Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_CONDICION Parentesis_c Punto_coma
;

FOR ::= 
    For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_DATO Identificador Op_asignacion Numero Punto_coma SENTENCIA_CONDICION Punto_coma DECLARACION_FOR |
    Identificador Op_asignacion Numero Punto_coma SENTENCIA_CONDICION Punto_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador OPERADORES_ASIGNACION Numero |

    Identificador Op_incremento | 
    Identificador Op_decremento |
    Op_incremento Identificador |
    Op_decremento Identificador
;

SWITCH ::=
    Switch Parentesis_a Identificador Parentesis_c Llave_a SENTENCIA_SWITCH Llave_c
;

SENTENCIA_SWITCH ::=
    SENTENCIA_SWITCH DECLARACION_SWITCH |
    DECLARACION_SWITCH
;

DECLARACION_SWITCH ::=
    Case Numero Dos_puntos SENTENCIA Break Punto_coma |
    Case Identificador Dos_puntos SENTENCIA Break Punto_coma |
    Default Dos_puntos SENTENCIA
;