package Analizador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Int, Char, Byte, Double, Float, Cadena, Long, Short, Linea, 
    Comillas, Igual, Suma, Resta, Multiplicacion, Division, Modulo, Parent_a, 
    Parent_c, Llave_a, Llave_c, Corchete_a, Corchete_c, If, Register,
    Else, Return, Const, Continue, Switch, Typedef, Case, Void, Break,
    Default, Do, While, Struct, For, Include, Iostream, Using, Unsigned,
    Namespace, Std, Cin, Define, Cout, Scanf, Printf, Main, Op_log_and,
    Op_log_or, Op_log_not, Op_log_and_bit, Op_log_or_bit, Op_rel_mayor_que, 
    Op_rel_menor_que, Op_rel_equivalente, Op_rel_diferente, Op_rel_mayor_igual,
    Op_rel_menor_igual, Op_rel_desplaz_izq, Op_rel_desplaz_der, Op_atr_suma, 
    Op_atr_resta, Op_inclu_lib, Op_atr_producto, Op_atr_division, Op_atr_modulo,
    Op_atr_incremento, Op_atr_decremento, True, False, P_coma, Coma, Punto, 
    Dos_puntos, Identificador, Numero, ERROR;

non terminal INICIO, SENTENCIA, DECLARACION, WHILE, DO, IF, IF_ELSE, FOR, SWITCH,
    SENTENCIA_BOOLEANA, CIN, COUT, SCANF, PRINTF ;

start with INICIO;

INICIO ::= 
    Using Namespace Std P_coma Linea Int Main Parent_a Parent_c Llave_a Linea SENTENCIA Linea Llave_c |
    Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    DECLARACION |
    /*DECLARACION Linea SENTENCIA | */
    SENTENCIA_BOOLEANA |
    /*SENTENCIA_BOOLEANA Linea SENTENCIA | */
    WHILE |
    /*WHILE Linea SENTENCIA |*/
    DO |
    /*DO Linea SENTENCIA | */
    IF |
    /*IF Linea SENTENCIA | */
    IF_ELSE |
    /*IF_ELSE Linea SENTENCIA | */
    FOR |
    /*FOR Linea SENTENCIA | */
    SWITCH 
    /*SWITCH Linea SENTENCIA */
    CIN | 
    COUT | 
    SCANF | 
    PRINTF
;
DECLARACION ::=
    Int Identificador P_coma |
    Int Identificador Igual Numero P_coma |
    Int Identificador Coma Identificador P_coma |
    Int Identificador Igual Numero Coma Identificador Igual Numero P_coma |
    Double Identificador P_coma |
    Double Identificador Igual Numero P_coma |
    Double Identificador Coma Identificador P_coma |
    Double Identificador Igual Numero Coma Identificador Igual Numero P_coma |
    Float Identificador P_coma |
    Float Identificador Igual Numero P_coma |
    Float Identificador Coma Identificador P_coma |
    Float Identificador Igual Numero Coma Identificador Igual Numero P_coma |
    Char Identificador Corchete_a Numero Corchete_c P_coma |
    Cadena Identificador P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    Cadena Identificador Coma Identificador P_coma |
    Cadena Identificador Igual Comillas Comillas Coma Identificador Igual Comillas Comillas P_coma |
    Identificador Op_atr_suma Numero P_coma |  
    Identificador Op_atr_resta Numero P_coma |
    Identificador Op_atr_incremento P_coma | 
    Identificador Op_atr_decremento P_coma
;
SENTENCIA_BOOLEANA ::= 
    Identificador Op_rel_equivalente True |
    Identificador Op_rel_equivalente True Op_log_or SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente True Op_log_and SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente False |
    Identificador Op_rel_equivalente False Op_log_or SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente False Op_log_and SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente Numero |
    Identificador Op_rel_equivalente Numero Op_log_or SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente Numero Op_log_and SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente Identificador |
    Identificador Op_rel_equivalente Identificador Op_log_or SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente Identificador Op_log_and SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente Comillas Comillas |
    Identificador Op_rel_equivalente Comillas Comillas Op_log_or SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente Comillas Comillas Op_log_and SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente Comillas Identificador Comillas |
    Identificador Op_rel_equivalente Comillas Identificador Comillas Op_log_or SENTENCIA_BOOLEANA |
    Identificador Op_rel_equivalente Comillas Identificador Comillas Op_log_and SENTENCIA_BOOLEANA
;
WHILE ::=
    While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a Linea SENTENCIA Linea Llave_c
;
IF ::= 
    If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a Linea SENTENCIA Linea Llave_c
;
IF_ELSE ::= 
    If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a Linea SENTENCIA Llave_c Linea Else Llave_a Linea SENTENCIA Linea Llave_c
;

